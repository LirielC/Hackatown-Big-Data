#!/usr/bin/env python3
"""
Script para verificar qualidade dos dados hist√≥ricos
"""

import pandas as pd
from pathlib import Path

def check_data_quality():
    """Verifica qualidade dos dados hist√≥ricos e features"""

    print('üîç VERIFICANDO DADOS HIST√ìRICOS')
    print('=' * 35)

    try:
        # Carregar dados hist√≥ricos
        historical_file = 'data/processed/weekly_sales_processed.parquet'
        if Path(historical_file).exists():
            df_hist = pd.read_parquet(historical_file)
            print(f'‚úÖ Dados hist√≥ricos: {len(df_hist):,} registros')

            # Estat√≠sticas
            zero_hist = (df_hist['quantidade'] == 0).sum()
            non_zero_hist = (df_hist['quantidade'] != 0).sum()
            zero_hist_pct = zero_hist / len(df_hist) * 100

            print(f'Quantidade - M√©dia: {df_hist["quantidade"].mean():.2f}')
            print(f'Quantidade - Mediana: {df_hist["quantidade"].median():.2f}')
            print(f'Quantidade - M√°ximo: {df_hist["quantidade"].max()}')

            print(f'Valores zero: {zero_hist:,} ({zero_hist_pct:.1f}%)')
            print(f'Valores n√£o-zero: {non_zero_hist:,} ({100-zero_hist_pct:.1f}%)')

            if zero_hist_pct > 90:
                print('‚ùå CR√çTICO: Quase todos os valores hist√≥ricos s√£o zero!')
                print('Isso explica por que as previs√µes s√£o zero.')
            elif zero_hist_pct > 50:
                print('‚ö†Ô∏è GRAVE: Muitos valores zero nos dados hist√≥ricos!')
            else:
                print('‚úÖ Dados hist√≥ricos parecem OK.')
        else:
            print(f'‚ùå Dados hist√≥ricos n√£o encontrados: {historical_file}')

    except Exception as e:
        print(f'‚ùå Erro dados hist√≥ricos: {e}')

    print('\nüîç VERIFICANDO FEATURES')
    print('=' * 25)

    try:
        features_file = 'data/processed/features_engineered.parquet'
        if Path(features_file).exists():
            df_feat = pd.read_parquet(features_file)
            print(f'‚úÖ Features: {len(df_feat):,} registros, {len(df_feat.columns)} colunas')

            if 'quantidade' in df_feat.columns:
                print('‚úÖ Target presente')
            else:
                print('‚ùå Target ausente')

            # Contar features
            exclude_cols = ['pdv', 'produto', 'data_semana', 'data', 'quantidade']
            feature_cols = [col for col in df_feat.columns if col not in exclude_cols]
            print(f'Features num√©ricas: {len(feature_cols)}')
        else:
            print(f'‚ùå Features n√£o encontradas: {features_file}')

    except Exception as e:
        print(f'‚ùå Erro features: {e}')

    print('\nüîç VERIFICANDO MODELO')
    print('=' * 20)

    try:
        model_file = 'models/hackathon_forecast_model.pkl'
        if Path(model_file).exists():
            print('‚úÖ Modelo treinado encontrado')
            import joblib
            model_data = joblib.load(model_file)
            print('‚úÖ Modelo carregado com sucesso')

            # Verificar se √© um modelo v√°lido
            if hasattr(model_data, 'predict'):
                print('‚úÖ Modelo tem m√©todo predict')
            else:
                print('‚ùå Modelo n√£o tem m√©todo predict')
        else:
            print('‚ùå Modelo n√£o encontrado')

    except Exception as e:
        print(f'‚ùå Erro modelo: {e}')

if __name__ == "__main__":
    check_data_quality()

